# Generated from ImageManipulation.g4 by ANTLR 4.13.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,21,177,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,
        1,5,1,5,1,5,1,5,1,5,1,5,1,6,1,6,1,6,1,6,1,6,1,6,1,7,1,7,1,7,1,7,
        1,7,1,7,1,7,1,7,1,7,1,7,1,7,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,1,8,
        1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,
        1,10,1,10,1,10,1,11,1,11,1,12,1,12,1,12,1,12,1,12,1,13,1,13,1,13,
        1,13,1,13,1,13,1,13,1,14,1,14,1,14,1,14,1,14,1,15,1,15,5,15,128,
        8,15,10,15,12,15,131,9,15,1,16,4,16,134,8,16,11,16,12,16,135,1,17,
        1,17,4,17,140,8,17,11,17,12,17,141,1,17,1,17,1,18,1,18,1,18,1,18,
        5,18,150,8,18,10,18,12,18,153,9,18,1,18,1,18,1,19,1,19,1,19,1,19,
        5,19,161,8,19,10,19,12,19,164,9,19,1,19,1,19,1,19,1,19,1,19,1,20,
        4,20,172,8,20,11,20,12,20,173,1,20,1,20,1,162,0,21,1,1,3,2,5,3,7,
        4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,25,13,27,14,29,15,31,
        16,33,17,35,18,37,19,39,20,41,21,1,0,6,3,0,65,90,95,95,97,122,4,
        0,48,57,65,90,95,95,97,122,1,0,48,57,3,0,46,57,65,90,97,122,2,0,
        10,10,13,13,3,0,9,10,13,13,32,32,182,0,1,1,0,0,0,0,3,1,0,0,0,0,5,
        1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,
        0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,
        0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,
        0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,1,43,1,0,0,0,3,45,1,
        0,0,0,5,50,1,0,0,0,7,52,1,0,0,0,9,54,1,0,0,0,11,56,1,0,0,0,13,62,
        1,0,0,0,15,68,1,0,0,0,17,79,1,0,0,0,19,90,1,0,0,0,21,99,1,0,0,0,
        23,106,1,0,0,0,25,108,1,0,0,0,27,113,1,0,0,0,29,120,1,0,0,0,31,125,
        1,0,0,0,33,133,1,0,0,0,35,137,1,0,0,0,37,145,1,0,0,0,39,156,1,0,
        0,0,41,171,1,0,0,0,43,44,5,61,0,0,44,2,1,0,0,0,45,46,5,111,0,0,46,
        47,5,112,0,0,47,48,5,101,0,0,48,49,5,110,0,0,49,4,1,0,0,0,50,51,
        5,40,0,0,51,6,1,0,0,0,52,53,5,41,0,0,53,8,1,0,0,0,54,55,5,46,0,0,
        55,10,1,0,0,0,56,57,5,102,0,0,57,58,5,108,0,0,58,59,5,105,0,0,59,
        60,5,112,0,0,60,61,5,88,0,0,61,12,1,0,0,0,62,63,5,102,0,0,63,64,
        5,108,0,0,64,65,5,105,0,0,65,66,5,112,0,0,66,67,5,89,0,0,67,14,1,
        0,0,0,68,69,5,115,0,0,69,70,5,97,0,0,70,71,5,116,0,0,71,72,5,117,
        0,0,72,73,5,114,0,0,73,74,5,97,0,0,74,75,5,116,0,0,75,76,5,105,0,
        0,76,77,5,111,0,0,77,78,5,110,0,0,78,16,1,0,0,0,79,80,5,98,0,0,80,
        81,5,114,0,0,81,82,5,105,0,0,82,83,5,103,0,0,83,84,5,104,0,0,84,
        85,5,116,0,0,85,86,5,110,0,0,86,87,5,101,0,0,87,88,5,115,0,0,88,
        89,5,115,0,0,89,18,1,0,0,0,90,91,5,99,0,0,91,92,5,111,0,0,92,93,
        5,110,0,0,93,94,5,116,0,0,94,95,5,114,0,0,95,96,5,97,0,0,96,97,5,
        115,0,0,97,98,5,116,0,0,98,20,1,0,0,0,99,100,5,114,0,0,100,101,5,
        101,0,0,101,102,5,115,0,0,102,103,5,105,0,0,103,104,5,122,0,0,104,
        105,5,101,0,0,105,22,1,0,0,0,106,107,5,44,0,0,107,24,1,0,0,0,108,
        109,5,99,0,0,109,110,5,114,0,0,110,111,5,111,0,0,111,112,5,112,0,
        0,112,26,1,0,0,0,113,114,5,114,0,0,114,115,5,111,0,0,115,116,5,116,
        0,0,116,117,5,97,0,0,117,118,5,116,0,0,118,119,5,101,0,0,119,28,
        1,0,0,0,120,121,5,115,0,0,121,122,5,97,0,0,122,123,5,118,0,0,123,
        124,5,101,0,0,124,30,1,0,0,0,125,129,7,0,0,0,126,128,7,1,0,0,127,
        126,1,0,0,0,128,131,1,0,0,0,129,127,1,0,0,0,129,130,1,0,0,0,130,
        32,1,0,0,0,131,129,1,0,0,0,132,134,7,2,0,0,133,132,1,0,0,0,134,135,
        1,0,0,0,135,133,1,0,0,0,135,136,1,0,0,0,136,34,1,0,0,0,137,139,5,
        34,0,0,138,140,7,3,0,0,139,138,1,0,0,0,140,141,1,0,0,0,141,139,1,
        0,0,0,141,142,1,0,0,0,142,143,1,0,0,0,143,144,5,34,0,0,144,36,1,
        0,0,0,145,146,5,47,0,0,146,147,5,47,0,0,147,151,1,0,0,0,148,150,
        8,4,0,0,149,148,1,0,0,0,150,153,1,0,0,0,151,149,1,0,0,0,151,152,
        1,0,0,0,152,154,1,0,0,0,153,151,1,0,0,0,154,155,6,18,0,0,155,38,
        1,0,0,0,156,157,5,47,0,0,157,158,5,42,0,0,158,162,1,0,0,0,159,161,
        9,0,0,0,160,159,1,0,0,0,161,164,1,0,0,0,162,163,1,0,0,0,162,160,
        1,0,0,0,163,165,1,0,0,0,164,162,1,0,0,0,165,166,5,42,0,0,166,167,
        5,47,0,0,167,168,1,0,0,0,168,169,6,19,0,0,169,40,1,0,0,0,170,172,
        7,5,0,0,171,170,1,0,0,0,172,173,1,0,0,0,173,171,1,0,0,0,173,174,
        1,0,0,0,174,175,1,0,0,0,175,176,6,20,0,0,176,42,1,0,0,0,7,0,129,
        135,141,151,162,173,1,6,0,0
    ]

class ImageManipulationLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    ID = 16
    NUMBER = 17
    STRING = 18
    LINE_COMMENT = 19
    BLOCK_COMMENT = 20
    WS = 21

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'='", "'open'", "'('", "')'", "'.'", "'flipX'", "'flipY'", 
            "'saturation'", "'brightness'", "'contrast'", "'resize'", "','", 
            "'crop'", "'rotate'", "'save'" ]

    symbolicNames = [ "<INVALID>",
            "ID", "NUMBER", "STRING", "LINE_COMMENT", "BLOCK_COMMENT", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "ID", "NUMBER", "STRING", "LINE_COMMENT", "BLOCK_COMMENT", 
                  "WS" ]

    grammarFileName = "ImageManipulation.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.13.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


